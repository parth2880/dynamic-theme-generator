// This is your Prisma schema file for PostgreSQL production
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]
  themes   Theme[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  webhookUrl  String
  apiKey      String   @unique
  platform    Platform @default(CUSTOM)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  themes ProjectTheme[]
  webhookLogs WebhookLog[]

  @@map("projects")
}

model Theme {
  id          String   @id @default(cuid())
  name        String
  description String?
  colors      String   // JSON string of colors
  radius      String   // JSON string of radius values
  effects     String   // JSON string of effects
  isPublic    Boolean  @default(false)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects ProjectTheme[]

  @@map("themes")
}

model ProjectTheme {
  id        String   @id @default(cuid())
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  themeId   String
  theme     Theme   @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@unique([projectId, themeId])
  @@map("project_themes")
}

model WebhookLog {
  id        String        @id @default(cuid())
  status    WebhookStatus
  response  String?       // JSON string of response
  error     String?
  createdAt DateTime      @default(now())

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("webhook_logs")
}

enum Platform {
  VERCEL
  NETLIFY
  CUSTOM
  GITHUB
}

enum WebhookStatus {
  SUCCESS
  FAILED
  PENDING
}
